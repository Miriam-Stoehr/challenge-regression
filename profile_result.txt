Wrote profile results to main.py.lprof
Timer unit: 1e-06 s

Total time: 0.875786 s
File: C:\Dokumente\Programming&DataScience\BeCode\AI & DS Bootcamp\Content\Projects\challenge-regression\model_utils.py
Function: calculate_avg_neighbor_distances at line 217

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   217                                               @staticmethod
   218                                               @profile
   219                                               def calculate_avg_neighbor_distances(X_test_scaled: np.ndarray) -> np.ndarray:
   220                                                   """
   221                                                   Calculate the average distances of test points to their k-nearest neighbors.
   222
   223                                                   Args:
   224                                                       X_test_scaled (np.ndarray): Scaled test features.
   225
   226                                                   Returns:
   227                                                       np.ndarray: Average distances for each test instance.
   228                                                   """
   229         1     875269.7 875269.7     99.9          distances, _ = ModelUtils._model.kneighbors(X_test_scaled)
   230         1        515.4    515.4      0.1          avg_distances = distances.mean(axis=1)
   231         1          0.6      0.6      0.0          return avg_distances

Total time: 1.10398 s
File: C:\Dokumente\Programming&DataScience\BeCode\AI & DS Bootcamp\Content\Projects\challenge-regression\model_utils.py
Function: plot_avg_neighbor_distances at line 233

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   233                                               @staticmethod
   234                                               @profile
   235                                               def plot_avg_neighbor_distances(
   236                                                   avg_distances: List[float],
   237                                                   file_path: str = "./figures/Distribution of Average Neighbor Distances.png",
   238                                               ) -> None:
   239                                                   """
   240                                                   Visualize the distribution of average neighbor distances.
   241
   242                                                   Args:
   243                                                       avg_distances (List[float]): A list of average distances to nearest neighbors for test instances.
   244
   245                                                   Returns:
   246                                                       None: This function generates a histogram plot with a KDE (Kerne Density Estimate).        
   247                                                   """
   248         1      13636.7  13636.7      1.2          plt.figure(figsize=(10, 6))
   249         1     468924.5 468924.5     42.5          sns.histplot(avg_distances, kde=True, bins=30, color="#1542C9")
   250         1       1037.1   1037.1      0.1          plt.title("Distribution of Average Neighbor Distances", fontsize=16)
   251         1        191.4    191.4      0.0          plt.xlabel("Average Distances", fontsize=14)
   252         1        328.1    328.1      0.0          plt.ylabel("Frequency", fontsize=14)
   253         1       5549.9   5549.9      0.5          plt.grid(alpha=0.4)
   254         1     613927.1 613927.1     55.6          plt.savefig(file_path, format="png", dpi=300, bbox_inches="tight")
   255         1        385.7    385.7      0.0          plt.close()

Total time: 133.67 s
File: C:\Dokumente\Programming&DataScience\BeCode\AI & DS Bootcamp\Content\Projects\challenge-regression\model_utils.py
Function: calc_permutation_importance at line 257

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   257                                               @staticmethod
   258                                               @profile
   259                                               def calc_permutation_importance(
   260                                                   X: np.ndarray, y: np.ndarray, n_repeats: int = 10
   261                                               ) -> Dict[str, float]:
   262                                                   """
   263                                                   Compute permutation importance for features.
   264
   265                                                   Args:
   266                                                       X (np.ndarray): Feature set.
   267                                                       y (np.ndarray): Target values.
   268                                                       n_repeats (int): Number of shuffling repetitions.
   269
   270                                                   Returns:
   271                                                       Dict[str, float]: Importance scores for each feature.
   272                                                   """
   273         1     966840.8 966840.8      0.7          baseline_score = r2_score(y, ModelUtils._model.predict(X))
   274         1          1.0      1.0      0.0          importances = []
   275
   276        10         11.4      1.1      0.0          for i in range(X.shape[1]):
   277         9          8.2      0.9      0.0              shuffled_scores = []
   278        99         72.7      0.7      0.0              for _ in range(n_repeats):
   279        90      68018.7    755.8      0.1                  X_shuffled = X.copy()
   280        90      88238.7    980.4      0.1                  np.random.shuffle(X_shuffled[:, i])  # Shuffle column i
   281        90  132546243.8    1e+06     99.2                  score = r2_score(y, ModelUtils._model.predict(X_shuffled))
   282        90        139.9      1.6      0.0                  shuffled_scores.append(baseline_score - score)
   283
   284         9        374.2     41.6      0.0              avg_importance = np.mean(shuffled_scores)
   285         9          7.0      0.8      0.0              importances.append(avg_importance)
   286
   287         1          5.9      5.9      0.0          return dict(zip(range(X.shape[1]), importances))

Total time: 0.747685 s
File: C:\Dokumente\Programming&DataScience\BeCode\AI & DS Bootcamp\Content\Projects\challenge-regression\model_utils.py
Function: plot_permutation_importance at line 289

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   289                                               @staticmethod
   290                                               @profile
   291                                               def plot_permutation_importance(
   292                                                   permutation_scores: Dict[int, float],
   293                                                   feature_names: List[str],
   294                                                   file_path: str = "./figures/Permutation Feature Importance.png",
   295                                               ) -> None:
   296                                                   """
   297                                                   Visualize feature importance based on permutation scores.
   298
   299                                                   Args:
   300                                                       permutation_scores (Dict[int, float]): A dictionary where the keys are feature indices     
   301                                                                                           and the values are the computed importance scores.     
   302                                                       feature_names (List[str]): A list of feature names corresponding to the feature indices.   
   303
   304                                                   Returns:
   305                                                       None: This function generates a horizontal bar chart to display feature importance.        
   306                                                   """
   307                                                   # Sort permutation scores by importance (descending order)
   308         2         17.8      8.9      0.0          sorted_importances = sorted(
   309         1          1.7      1.7      0.0              permutation_scores.items(), key=lambda x: x[1], reverse=True
   310                                                   )
   311         1          3.0      3.0      0.0          features, importances = zip(*sorted_importances)
   312        10          6.1      0.6      0.0          feature_labels = [feature_names[i] for i in features]
   313
   314                                                   # Plot horizontal bar chart
   315         1       9929.7   9929.7      1.3          plt.figure(figsize=(12, 6))
   316         1      58552.2  58552.2      7.8          plt.barh(feature_labels, importances, color="#1542C9")
   317         1        663.0    663.0      0.1          plt.title("Permutation Feature Importance", fontsize=16)
   318         1        181.2    181.2      0.0          plt.xlabel("Importance Score", fontsize=14)
   319         1        162.4    162.4      0.0          plt.ylabel("Features", fontsize=14)
   320         1       2079.7   2079.7      0.3          plt.gca().invert_yaxis()  # Invert y-axis for better visualization
   321         1     675790.3 675790.3     90.4          plt.savefig(file_path, format="png", dpi=300, bbox_inches="tight")
   322         1        298.0    298.0      0.0          plt.close()

PS C:\Dokumente\Programming&DataScience\BeCode\AI & DS Bootcamp\Content\Projects\challenge-regression>